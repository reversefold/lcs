<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx">
	<s:creationComplete>
		<![CDATA[
			test();
		]]>
	</s:creationComplete>
	<s:enterFrame>
		<![CDATA[
			onEnterFrame(event);
		]]>
	</s:enterFrame>
	
	<fx:Declarations>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import avmplus.getQualifiedClassName;
			
			import com.reversefold.lcs.LCSFSM;
			import com.reversefold.lcs.state.Forward;
			
			import spark.components.RichText;
			import spark.layouts.HorizontalLayout;
			import spark.layouts.VerticalLayout;
			
			public static const ARRAY_LENGTH : uint = 30;
			public static const FRAMES_PER_TICK : uint = 1;
			private static const DEFAULT_TICKS_PER_FRAME : uint = 10;
			public static var TICKS_PER_FRAME : uint = DEFAULT_TICKS_PER_FRAME;
			
			[Bindable]
			private var _lcsfsm : LCSFSM;
			
			[Bindable]
			private var _go : Boolean = false;
			
			[Bindable]
			private var _array0 : Array;
			[Bindable]
			private var _array1 : Array;
			
			[Bindable]
			private var _frames : uint = 0;
			
			private var _matrixDirty : Boolean = false;
			
			private function onEnterFrame(inEvent : Event) : void {
				if (!_go) {
					updateMatrix();
					return;
				}
				++_frames;
				if (_frames % FRAMES_PER_TICK != 0) {
					updateMatrix();
					return;
				}
				_frames = 0;
				for (var i : uint = 0; i < TICKS_PER_FRAME; ++i) {
					if (_go) {
						_go = _lcsfsm.next();
					}
				}
				updateMatrix();
			}
			
			private function updateMatrix() : void {
				if (_matrixDirty) {
					var row : Group;
					var cell : Cell;
					for (var i : uint = 1; i <= _array0.length; ++i) {
						row = Group(matrixRows.getChildAt(i));
						
						for (var u : int = 1; u <= _array1.length; ++u) {
							var cellText : String;
							try {
								cellText = new Number(_lcsfsm.match_matrix[i][u]).toFixed(0).replace(/\./, "");
							} catch (e : Error) {
								cellText = "";
							}
							cell = Cell(row.getChildAt(u));
							if (cellText == cell.text) {
								continue;
							}
							cell.text = cellText;
							if (cellText != ""
								&& (i == 0
									|| _lcsfsm.match_matrix[i][u] > _lcsfsm.match_matrix[i - 1][u])) {
								cell.setStyle("topBorder", true);
							}
							if (cellText != ""
								&& (u == 0
									|| _lcsfsm.match_matrix[i][u] > _lcsfsm.match_matrix[i][u - 1])) {
								cell.setStyle("leftBorder", true);
							}
						}
					}
				}
			}
			
			private function test(type : String = "random") : void {
				var $str1 : String = "";
				var $str2 : String = "";
				var chars : Array = [ "a", "c", "g", "t" ];
				var index0 : int = 0;
				var index1 : int = 0;
				var length : int = int(stringLength.text);
				for (var i : uint = 0; i < length; ++i) {
					switch (type) {
						case "repeat":
							index0 = (index0 + 1) % chars.length;
							index1 = (index1 + 1) % chars.length;
							break;
						case "monotone":
							//nothing
							break;
						case "flipped":
							index0 = (i < length / 2)
							? (index0 - 1)
							: (index0 + 1) % 3;
							index0 = index0 < 0 ? index0 + 3 : index0;
							index1 = (i < length / 2)
							? (index1 + 1) % 3
							: (index1 - 1);
							index1 = index1 < 0 ? index1 + 3 : index1;
							break;
						case "random":
							index0 = int(Math.random() * chars.length);
							index1 = int(Math.random() * chars.length);
							break;
					}
					$str1 += chars[index0];
					$str2 += chars[index1];
				}

				_array0 = $str1.split("");
				_array1 = $str2.split("");
				
				matrixRows.removeAllElements();
				output0.text = "";
				output1.text = "";
				
				var row : Group = new Group();
				row.layout = new HorizontalLayout();
				HorizontalLayout(row.layout).gap = 0;
				var cell : Cell = new Cell();
				row.addElement(cell);
				for (var u : int = 0; u < _array1.length; ++u) {
					cell = new Cell();
					cell.text = _array1[u];
					row.addElement(cell);
				}
				matrixRows.addElement(row);
				for (i = 0; i < _array0.length; ++i) {
					row = new Group();
					row.layout = new HorizontalLayout();
					HorizontalLayout(row.layout).gap = 0;
					matrixRows.addElement(row);
					cell = new Cell();
					cell.text = _array0[i];
					row.addElement(cell);
					
					for (u = 0; u < _array1.length; ++u) {
						cell = new Cell();
						row.addElement(cell);
					}
				}
				var compareFunc : Function = function(in1 : String, in2 : String) : Boolean {
					return in1 == in2;
				};
				_lcsfsm = new LCSFSM(_array0, _array1, 3);
				_lcsfsm.addEventListener("resultIndexesChanged", redisplayOutput);
			}
			
			public function set matrixUpdated(inTrash : *) : void {
				_matrixDirty = true;
			}
			
			private var oldIndex0 : int = -1;
			private var oldIndex1 : int = -1;
			protected function getCell(inIndex0 : int, inIndex1 : int) : Cell {
				return Cell(Group(matrixRows.getChildAt(inIndex0)).getChildAt(inIndex1));
			}
			public function set indexChanged(inTrash : *) : void {
				if (oldIndex0 == _lcsfsm.idx_a
					&& oldIndex1 == _lcsfsm.idx_b) {
					return;
				}
				
				var idx_a : int = _lcsfsm.idx_a + (getQualifiedClassName(_lcsfsm.state).split('::')[1] == "Forward" ? 1 : 0);
				var idx_b : int = _lcsfsm.idx_b + (getQualifiedClassName(_lcsfsm.state).split('::')[1] == "Forward" ? 1 : 0);
				
				if (oldIndex0 != -1) {
					getCell(oldIndex0, 0).styleName = "";
					getCell(0, oldIndex1).styleName = "";
					getCell(oldIndex0, oldIndex1).styleName =
						_lcsfsm.state is Forward ? "" : "previouslyActive";
				}
				getCell(idx_a, idx_b).styleName = "active";
				getCell(idx_a, 0).styleName = "activeHeader";
				getCell(0, idx_b).styleName = "activeHeader";
				oldIndex0 = idx_a;
				oldIndex1 = idx_b;
			}
			
			private function redisplayOutput(inEvent : Event) : void {
				var p_a : Array = _lcsfsm.result_a.concat();
				var p_b : Array = _lcsfsm.result_b.concat();
				for (var idx_a : uint = 0; idx_a < p_a.length; ++idx_a) {
					if (p_a[idx_a] == null) {
						p_a[idx_a] = " ";
					}
				}
				for (var idx_b : uint = 0; idx_b < p_b.length; ++idx_b) {
					if (p_b[idx_b] == null) {
						p_b[idx_b] = " ";
					}
				}
				output0.text = "'" + p_a.join("") + "'";
				output1.text = "'" + p_b.join("") + "'";
			}
			
			private function nextStep() : void {
				TICKS_PER_FRAME = _array0.length;
				_go = true;
				_lcsfsm.addEventListener("stateChanged", atNextStep);
			}
			
			private function atNextStep(inEvent : Event) : void {
				_lcsfsm.removeEventListener("stateChanged", atNextStep);
				TICKS_PER_FRAME = DEFAULT_TICKS_PER_FRAME;
				_go = false;
			}
		]]>
	</fx:Script>
	
	<fx:Binding destination="matrixUpdated" source="_lcsfsm.match_matrix"/>
	
	<fx:Binding destination="indexChanged" source="_lcsfsm.resultIndexes"/>
	<fx:Binding destination="indexChanged" source="_lcsfsm.match_matrix"/>
	
	<s:Scroller width="100%" height="100%">
		<s:Group>
			<s:layout>
				<s:HorizontalLayout/>
			</s:layout>
			
			<mx:Spacer width="20"/>
			<s:Group>
				<s:layout>
					<s:VerticalLayout/>
				</s:layout>
				<mx:Spacer height="10"/>
				
				<s:Group>
					<s:layout>
						<s:HorizontalLayout verticalAlign="middle"/>
					</s:layout>
					<s:RichText text="{_frames}"/>
					<s:RichText text="{_lcsfsm.numberOfTicks}"/>
					<s:RichText text="{getQualifiedClassName(_lcsfsm.state)}"/>
					<s:RichText text="{_lcsfsm.idx_a}"/>
					<s:RichText text="{_lcsfsm.idx_b}"/>
					<s:RichText text="Length"/>
					<s:TextInput id="stringLength" restrict="0-9" text="{ARRAY_LENGTH}"/>
					<s:Button label="Re-Randomize" click="test()"/>
					<s:Button label="Repeating" click="test('repeat')"/>
					<s:Button label="Monotone" click="test('monotone')"/>
					<s:Button label="Flipped" click="test('flipped')"/>
				</s:Group>
				<s:Group>
					<s:layout>
						<s:HorizontalLayout/>
					</s:layout>
					
					<s:Button label="Next" click="_lcsfsm.next()"/>
					<s:Button label="{_go ? 'Stop' : 'Go'}" click="_go = !_go"/>
					<s:Button label="Next step" click="nextStep()"/>
				</s:Group>
				
				<s:RichText text="{_array0.join('')}" styleName="monospace"/>
				<s:RichText text="{_array1.join('')}" styleName="monospace"/>
				<s:Group id="matrixRows">
					<s:layout>
						<s:VerticalLayout gap="0"/>
					</s:layout>
				</s:Group>
				
				<s:RichText id="output0" styleName="monospace"/>
				<s:RichText id="output1" styleName="monospace"/>
				<mx:DataGrid id="resultGrid" dataProvider="{_lcsfsm.resultIndexes}"/>
				<mx:Spacer height="10"/>
			</s:Group>
		</s:Group>
	</s:Scroller>
</s:Group>
